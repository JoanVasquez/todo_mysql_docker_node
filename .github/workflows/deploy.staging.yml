name: Deploy Node.js App to ECR - Staging

on:
  push:
    branches:
      - dev

jobs:
  test_build:
    name: Testing before deploying
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # - name: Build Docker Image
      #   run: docker build -t todoapp:1.0.0-staging -f Dockerfile.staging .
      # - name: Running TodoApp
      #   run: docker run --name mytodoapp -it --rm -e MYSQL_HOST=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 5000:5000 todoapp:1.0.0-staging
    services:
      todoapp:
        image: .
        env:
          MYSQL_HOST: ${{ secrets.DB_HOST }}
          MYSQL_DATABASE: todo_db
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}

  deploy:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      # Check the Dockerfile to build the docker image
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      # Programmatic authentication to aws
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: todo_node
          IMAGE_TAG: 1.0.0-staging
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.staging .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
